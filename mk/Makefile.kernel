#Copyright (c) 2019 Jie Zheng
ifeq ($(ZELDA),)
$(error 'please specify env variable ZELDA')
endif

DEFS = -DSERIAL_OUTPUT -DINLINE_TEST -DKERNEL_CONTEXT
GCCPARAMS = -m64 -O0 -g -ffreestanding -nostdlib -fno-builtin -fno-exceptions -Werror -Wall -Wstrict-prototypes

KERNEL_IMAGE_CODE64 = Zelda64.code64
KERNEL_IMAGE = Zelda64.bin
ASPARAMS = --64
LDPARAMS = -m elf_x86_64 -Map=$(KERNEL_IMAGE_CODE64).map


OS_PACKAGE = Zelda64.iso

C_FILES = $(foreach item,$(DIRS),$(wildcard $(item)/*.c))
C_OBJS = $(patsubst %.c,%.o,$(C_FILES))


AS_FILES = $(foreach item,$(DIRS),$(wildcard $(item)/*.S))
AS_OBJS = $(patsubst %.S,%.o,$(AS_FILES))

KERNEL32_CFILES = $(wildcard code32/*.c)
KERNEL32_ASFILES = $(wildcard code32/*.S)
KERNEL32_OBJS = $(patsubst %.S,%.o,$(KERNEL32_ASFILES))
KERNEL32_OBJS += $(patsubst %.c,%.o,$(KERNEL32_CFILES))

KERNEL_DEPENDS = $(C_OBJS) $(ASM_OBJS) $(AS_OBJS)

%.o: %.c
	@echo "[CC] $<"
	@gcc $(GCCPARAMS) $(DEFS) -I . -include zelda_config.h  -o $@ -c $<


%.o: %.S
	@echo "[AS] $<"
	@as $(ASPARAMS) -o $@ $<

$(OS_PACKAGE):

$(KERNEL_IMAGE): $(KERNEL32_CFILES) $(KERNEL32_ASFILES) $(KERNEL_IMAGE_CODE64)
	@echo '[CODE32] generate asm backed object files'; \
	for _asm_file in $(KERNEL32_ASFILES); \
	do \
		_obj_file=`echo $$_asm_file | sed 's/\.S/.o/g'`; \
		as --32 $$_asm_file -o $$_obj_file; \
	done
	@echo '[CODE32] generate C backed object files'; \
	for _c_file in $(KERNEL32_CFILES); \
	do \
		_obj_file=`echo $$_c_file | sed 's/\.c/.o/g'`; \
		gcc -m32 -O0 -g -ffreestanding -nostdlib -fno-builtin -fno-exceptions -Werror -Wall -Wstrict-prototypes \
			-DCODE32_CONTEXT -I$(ZELDA) -c $$_c_file -o $$_obj_file; \
	done
	@ld -m elf_i386 -T $(ZELDA)/mk/linker.ld.kernel32 -Map=$(KERNEL_IMAGE).map -o $(KERNEL_IMAGE) $(KERNEL32_OBJS)

$(KERNEL_IMAGE_CODE64): $(KERNEL_DEPENDS)
	@echo "[LD] $@"
	@ld $(LDPARAMS) -T $(ZELDA)/mk/linker.ld.kernel -o $@ $(KERNEL_DEPENDS)
clean:
	@rm -f $(KERNEL32_OBJS)
	@rm -f $(KERNEL_IMAGE) Zelda* $(KERNEL_DEPENDS)
	@rm -f $(OS_PACKAGE)
	@rm -f iso/boot/$(KERNEL_IMAGE)
$(OS_PACKAGE): $(KERNEL_IMAGE)
	@cp $(KERNEL_IMAGE) iso/boot
	@grub2-mkrescue -o $(OS_PACKAGE) iso

install:$(OS_PACKAGE)
	@cp $(OS_PACKAGE) /mnt/projects

drive:
	make -C ZeldaDrive

